{% trans_default_domain "wellcommerce" %}
{% macro datagrid_header(id) %}
    {% autoescape true %}
    <div class="block">
        <div id="datagrid-{{ id }}"></div>
    </div>
    {% endautoescape %}
{% endmacro %}

{% macro datagrid_column(id, options) %}

    var column_{{ id }} = new GF_Datagrid_Column({
        id: '{{ id }}',
        caption: '{{ options.caption }}',
        editable: {{ options.editable ? 'true' : 'false' }},
        selectable: {{ options.selectable ? 'true' : 'false' }},
        sorting: {{ options.sorting|raw }},
        appearance: {{ options.appearance|raw }},
        filter: {{ options.filter|raw }}
    });
{% endmacro %}

{% macro datagrid_options (datagrid) %}
    var options = {
        id: '{{ datagrid.getIdentifier() }}',
        appearance: {
            {{ datagrid.getOptions().getAppearance()|raw }}
        },
        mechanics: {
            {{ datagrid.getOptions().getMechanics()|raw }}
        },
        event_handlers: {
            {% for name, event in datagrid.getOptions().getEventHandlers() if event.isCustomEvent() == false %}
                {{ name }}: {{ event.get('function') }},
            {% endfor %}
        },
        columns: [
            {% for key, column in datagrid.getColumns() %}
                column_{{ key }},
            {%  endfor %}
        ],
        row_actions: [
            {% for event in datagrid.getOptions().getEventHandlers() if event.has('row_action') and event.get('row_action') != false %}
                {{ event.get('row_action') }},
            {% endfor %}
        ],
        group_actions: [
            {% for event in datagrid.getOptions().getEventHandlers() if event.has('group_action') and event.get('group_action') != false %}
                {{ event.get('group_action') }},
            {% endfor %}
        ],
        context_actions: [
            {% for event in datagrid.getOptions().getEventHandlers() if event.has('context_action') and event.get('context_action') != false %}
                {{ event.get('context_action') }},
            {% endfor %}
        ]
    };
{% endmacro %}

{% macro load(options) %}
    {% autoescape true %}
    function {{ options.function }}(oRequest) {
        DataGrid.MakeRequest(Routing.generate('{{ options.route }}'), oRequest, GF_Datagrid.ProcessIncomingData);
    }
    {% endautoescape %}
{% endmacro %}

{% macro click_row(options) %}
    {% autoescape true %}
    function {{ options.function }}(dg, id) {
        return window.location.href = Routing.generate('{{ options.route }}', {id: id});
    }
    {% endautoescape %}
{% endmacro %}


{% macro edit_row(options) %}
    {% autoescape true %}
    function {{ options.function }}(dg, id) {
        return window.location.href = Routing.generate('{{ options.route }}', {id: id});
    }
    {% endautoescape %}
{% endmacro %}

{% macro custom(options) %}
    {% autoescape true %}
    function {{ options.function }}(dg, id) {
    }
    {% endautoescape %}
{% endmacro %}

{% macro delete_row(options) %}
    {% autoescape true %}
    function {{ options.function }}(dg, id) {
        var oRow = DataGrid.GetRow(id);
        var title = '{% trans %}dataset.label.delete{% endtrans %}';
        var msg = '{% trans %}dataset.label.confirm_delete{% endtrans %} ' + oRow.name + '?';
        var params = {
            id: id
        };

        var func = function(p) {
            oRequest = {
                id: p.id
            }

            DataGrid.MakeRequest(Routing.generate('{{ options.route }}', {id: p.id}), {}, function(oData){
                if(oData.success){
                    GMessage(oRow.name + ' successfully deleted');
                    DataGrid.LoadData();
                    DataGrid.ClearSelection();
                }
                if(oData.error){
                    GError(oData.error);
                    DataGrid.ClearSelection();
                }
            });
        };

        new GF_Alert(title, msg, func, true, params);
    }
    {% endautoescape %}
{% endmacro %}

{% macro delete_group(options) %}
    {% autoescape true %}
    function {{ options.function }}(dg, ids) {
        var title = '{% trans %}dataset.label.delete{% endtrans %}';
        var msg = '{% trans %}dataset.label.confirm_delete{% endtrans %} ' + ids.join(', ') + '?';
        var params = {
            dg: dg,
            ids: ids
        };

        var func = function(p) {
            oRequest = {
                ids: p.ids
            }

            DataGrid.MakeRequest(Routing.generate('{{ options.route }}', {ids: p.ids}), {}, function(oData){
                if(oData.success){
                    GMessage('Rows successfully deleted');
                    DataGrid.LoadData();
                    DataGrid.ClearSelection();
                }
                if(oData.error){
                    GError(oData.error);
                    DataGrid.ClearSelection();
                }
            });
        };

        new GF_Alert(title, msg, func, true, params);
    }
    {% endautoescape %}
{% endmacro %}

{% macro loaded(options) %}
    {% autoescape true %}

    {% endautoescape %}
{% endmacro %}

{% macro process(options) %}
    {% autoescape true %}

    {% endautoescape %}
{% endmacro %}

{% macro update_row(options) %}
    {% autoescape true %}
    function {{ options.function }}(sId, oRow, sColumn, sPreviousValue) {
        var oRequest = {
            id:        sId,
            product:   oRow,
            column:    sColumn,
            previous:  sPreviousValue
        };

        DataGrid.MakeRequest(Routing.generate('{{ options.route }}'), oRequest, function(oData){
            if(oData.success){
                GMessage(oRow.name + ' successfully saved');
                DataGrid.LoadData();
                DataGrid.ClearSelection();
            }

            if(oData.error){
                GError(oData.error);
                DataGrid.ClearSelection();
            }
        });
    }
    {% endautoescape %}
{% endmacro %}

{% macro view_row(options) %}
    {% autoescape true %}
    function {{ options.function }}(dg, id) {
        return window.location.href = Routing.generate('{{ options.route }}', {id: id});
    }
    {% endautoescape %}
{% endmacro %}
